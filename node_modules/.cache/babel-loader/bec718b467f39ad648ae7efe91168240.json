{"ast":null,"code":"var _jsxFileName = \"/Users/hichem/Documents/ULAVAL/E\\u0301TE\\u0301-2022/IFT-4100/tp3-demo/web-app/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // Librairie qui va nous permettre de communiquer avec notre contrat\n\nimport { ethers } from \"ethers\";\nimport './App.css'; // https://docs.soliditylang.org/en/v0.8.14/abi-spec.html?\n\nimport abi from \"./utils/IftOpinion.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // storer le wallet de l'utilisateur\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allPosts, setAllPosts] = useState([]);\n  const [inputData, setInputData] = useState(\"\"); // adresse de notre contrat deployé\n\n  const contractAddress = \"0x305142A4Bc45660889D9Dde146b60fF06c6BAF0C\";\n  /*  \n  * Lorsque on compile notre contrat, le compilateur genere des fichiers qui nous permettent d'interagir avec le contrat. \n  * les fichiers se trouve dans le dossier artefacts situé à la racine du projet Solidity.\n  * on copie le contenue du fichier json et on le ramene dans projet front-end dans \"/src/utils/IftOpinion.json\n  */\n\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Veuillez telecharger l'application Metamask!\");\n        return;\n      } else {\n        console.log(\"L'objet ethereum a été detecté\", ethereum);\n      }\n      /*\n        Check si on est autoriser a acceder au wallet de l'utilisateur\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"compte autoriser trouvé!\", account);\n        setCurrentAccount(account);\n        getAllPosts();\n      } else {\n        console.log(\"Aucun compte autoriser n'a été trouver !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Veuillez telecharger l'application Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const post = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        /*\n        * code qui nous permet de lire du data dans la blockchain(dans notre smart contract)\n        * cette transaction est gratuite donc pas de gas fees puisque on fais que lire et on n'apporte pas de changement\n        * dans la blockchain\n        */\n\n        /*\n        * Le provider c'est ce qui nous permet de communiquer avec les noeuds d'ethereum \n        * on utilise des nœuds que Metamask fournit pour envoyer/recevoir des données de notre contrat\n        */\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        /*\n        * Plus d'information sur le signer sur la doc de ethers https://docs.ethers.io/v5/api/signer/#signers?\n        */\n\n        const signer = provider.getSigner();\n        const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n        /*\n        * Code qui nous permet d'ecrire du data dans la blockchain\n        * Ici metamask va pop-up et va nous demander de payer un gas-fees\n        */\n\n        const postTxn = await iftOpinionContract.post(inputData);\n        console.log(\"Mining Transaction.....\", postTxn.hash);\n        await postTxn.wait();\n        console.log(\"Transaction Mined! \", postTxn.hash);\n        totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllPosts = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const posts = await iftOpinionContract.getAllPosts();\n        let myPosts = [];\n        posts.forEach(post => {\n          myPosts.push({\n            address: post.poster,\n            timestamp: new Date(post.timestamp * 1000),\n            data: post.data\n          });\n        });\n        setAllPosts(myPosts);\n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getInputData = val => {\n    setData(val.target.value);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Salut IFT-4100 \\uD83D\\uDC4B\\uD83D\\uDC4B\\uD83D\\uDC4B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: \"Je m'apelle Hichem, ce portrail est pour but de permettre aux membres du cours IFT-4100 de poster leurs opinions sur le cours ou bien des ressources que vous trouvez utiles pour apprendre le Web3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), currentAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: getInputData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"postButton\",\n          onClick: post,\n          children: \"Post !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"postButton\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), allPosts.map((post, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"OldLace\",\n            marginTop: \"16px\",\n            padding: \"8px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Address: \", post.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Temps: \", post.timestamp.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Message(Ressource): \", post.data]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Y2Cpj8XEKyk8lYNikJSAmGZDRgs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allPosts","setAllPosts","inputData","setInputData","contractAddress","contractABI","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","getAllPosts","error","connectWallet","alert","post","provider","providers","Web3Provider","signer","getSigner","iftOpinionContract","Contract","totalPosts","getTotalPosts","toNumber","postTxn","hash","wait","posts","myPosts","forEach","push","address","poster","timestamp","Date","data","getInputData","val","setData","target","value","map","index","backgroundColor","marginTop","padding","toString"],"sources":["/Users/hichem/Documents/ULAVAL/ÉTÉ-2022/IFT-4100/tp3-demo/web-app/my-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\n// Librairie qui va nous permettre de communiquer avec notre contrat\nimport { ethers } from \"ethers\"\n\nimport './App.css';\n\n// https://docs.soliditylang.org/en/v0.8.14/abi-spec.html?\nimport abi from \"./utils/IftOpinion.json\";\n\n\nconst App = () =>  {\n\n  // storer le wallet de l'utilisateur\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [allPosts, setAllPosts] = useState([]);\n  \n  const [inputData, setInputData] = useState(\"\");\n  // adresse de notre contrat deployé\n  const contractAddress = \"0x305142A4Bc45660889D9Dde146b60fF06c6BAF0C\";\n\n  /*  \n  * Lorsque on compile notre contrat, le compilateur genere des fichiers qui nous permettent d'interagir avec le contrat. \n  * les fichiers se trouve dans le dossier artefacts situé à la racine du projet Solidity.\n  * on copie le contenue du fichier json et on le ramene dans projet front-end dans \"/src/utils/IftOpinion.json\n  */\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Veuillez telecharger l'application Metamask!\")\n        return;\n      } else {\n        console.log(\"L'objet ethereum a été detecté\", ethereum);\n      }\n\n      /*\n        Check si on est autoriser a acceder au wallet de l'utilisateur\n      */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"compte autoriser trouvé!\", account);\n        setCurrentAccount(account);\n        getAllPosts();\n      } else {\n        console.log(\"Aucun compte autoriser n'a été trouver !\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Veuillez telecharger l'application Metamask!\")\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const post = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n\n        /*\n        * code qui nous permet de lire du data dans la blockchain(dans notre smart contract)\n        * cette transaction est gratuite donc pas de gas fees puisque on fais que lire et on n'apporte pas de changement\n        * dans la blockchain\n        */\n\n          /*\n          * Le provider c'est ce qui nous permet de communiquer avec les noeuds d'ethereum \n          * on utilise des nœuds que Metamask fournit pour envoyer/recevoir des données de notre contrat\n          */\n          const provider = new ethers.providers.Web3Provider(ethereum)\n\n          /*\n          * Plus d'information sur le signer sur la doc de ethers https://docs.ethers.io/v5/api/signer/#signers?\n          */\n          const signer = provider.getSigner();\n\n          const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n          let totalPosts = await iftOpinionContract.getTotalPosts();\n          console.log(\"Total Posts....\", totalPosts.toNumber());\n\n        /*\n        * Code qui nous permet d'ecrire du data dans la blockchain\n        * Ici metamask va pop-up et va nous demander de payer un gas-fees\n        */\n          const postTxn = await iftOpinionContract.post(inputData);\n          console.log(\"Mining Transaction.....\", postTxn.hash);\n\n          await postTxn.wait();\n          console.log(\"Transaction Mined! \", postTxn.hash);\n\n          totalPosts = await iftOpinionContract.getTotalPosts();\n          console.log(\"Total Posts....\", totalPosts.toNumber());\n        \n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getAllPosts = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const posts = await iftOpinionContract.getAllPosts();\n\n        let myPosts = [];\n        posts.forEach(post => {\n          myPosts.push({\n            address: post.poster,\n            timestamp: new Date(post.timestamp * 1000),\n            data: post.data\n          });\n        });\n        setAllPosts(myPosts);\n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getInputData = (val) => {\n    setData(val.target.value);\n  }\n\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Salut IFT-4100 👋👋👋\n        </div>\n\n        <div className=\"bio\">\n          Je m'apelle Hichem, ce portrail est pour but de permettre aux membres du cours IFT-4100 \n          de poster leurs opinions sur le cours ou bien des ressources que vous trouvez utiles \n          pour apprendre le Web3\n        </div>\n\n\n        {currentAccount && (\n          <>\n            <input type=\"text\" onChange={getInputData}/>\n            <button className=\"postButton\" onClick={post}>\n              Post !\n            </button>\n          </>\n        )}\n\n\n\n        {/*\n        * Si il n'y a pas de currentAccount on doit afficher notre button\n        */}\n        {!currentAccount && (\n          \n          <button className=\"postButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allPosts.map((post, index) =>{\n          return (\n            <div key={index} style={{backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\"}}>\n              <div>Address: {post.address}</div>\n              <div>Temps: {post.timestamp.toString()}</div>\n              <div>Message(Ressource): {post.data}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n\n}\n\nexport default App\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}