{"ast":null,"code":"var _jsxFileName = \"/Users/hichem/Documents/ULAVAL/E\\u0301TE\\u0301-2022/IFT-4100/tp3-demo/web-app/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // Librairie qui va nous permettre de communiquer avec notre contrat\n\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from \"./utils/IftOpinion.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // storer le wallet de l'utilisateur\n  const [currentAccount, setCurrentAccount] = useState(\"\"); // adresse de notre contrat deployé\n\n  const contractAddress = \"0x012a5c5C016c96E60188Ce6ab87B2D7336939eBE\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Veuillez telecharger l'application Metamask!\");\n        return;\n      } else {\n        console.log(\"L'objet ethereum a été detecté\", ethereum);\n      }\n      /*\n        Check si on est autoriser a acceder au wallet de l'utilisateur\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"compte autoriser trouvé!\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"Aucun compte autoriser n'a été trouver !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Veuillez telecharger l'application Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const post = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        /*\n        * Le provider c'est ce qui nous permet de communiquer avec les noeuds d'ethereum \n        * on utilise des nœuds que Metamask fournit pour envoyer/recevoir des données de notre contrat\n        */\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        /*\n        * Plus d'information sur le signer sur la doc de ethers https://docs.ethers.io/v5/api/signer/#signers?\n        */\n\n        const signer = provider.getSigner();\n        const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n        const postTxn = await iftOpinionContract.post();\n        console.log(\"Mining Transaction.....\", postTxn.hash);\n        await postTxn.wait();\n        console.log(\"Transaction Mined! \", postTxn.hash);\n        totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Salut IFT-4100 \\uD83D\\uDC4B\\uD83D\\uDC4B\\uD83D\\uDC4B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: \"Je m'apelle Hichem, ce portrail est pour but de permettre aux membres du cours IFT-4100 de poster leurs opinions sur le cours ou bien des ressources que vous trouvez utiles pour apprendre le Web3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"postButton\",\n        onClick: post,\n        children: \"Post !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"postButton\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","contractAddress","contractABI","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","connectWallet","alert","post","provider","providers","Web3Provider","signer","getSigner","iftOpinionContract","Contract","totalPosts","getTotalPosts","toNumber","postTxn","hash","wait"],"sources":["/Users/hichem/Documents/ULAVAL/ÉTÉ-2022/IFT-4100/tp3-demo/web-app/my-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n// Librairie qui va nous permettre de communiquer avec notre contrat\nimport { ethers } from \"ethers\"\nimport './App.css';\nimport abi from \"./utils/IftOpinion.json\";\n\n\nconst App = () =>  {\n\n  // storer le wallet de l'utilisateur\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // adresse de notre contrat deployé\n  const contractAddress = \"0x012a5c5C016c96E60188Ce6ab87B2D7336939eBE\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Veuillez telecharger l'application Metamask!\")\n        return;\n      } else {\n        console.log(\"L'objet ethereum a été detecté\", ethereum);\n      }\n\n      /*\n        Check si on est autoriser a acceder au wallet de l'utilisateur\n      */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"compte autoriser trouvé!\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"Aucun compte autoriser n'a été trouver !\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Veuillez telecharger l'application Metamask!\")\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const post = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        /*\n        * Le provider c'est ce qui nous permet de communiquer avec les noeuds d'ethereum \n        * on utilise des nœuds que Metamask fournit pour envoyer/recevoir des données de notre contrat\n        */\n        const provider = new ethers.providers.Web3Provider(ethereum)\n\n        /*\n        * Plus d'information sur le signer sur la doc de ethers https://docs.ethers.io/v5/api/signer/#signers?\n        */\n        const signer = provider.getSigner();\n\n        const iftOpinionContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n\n        const postTxn = await iftOpinionContract.post();\n        console.log(\"Mining Transaction.....\", postTxn.hash);\n\n        await postTxn.wait();\n        console.log(\"Transaction Mined! \", postTxn.hash);\n\n        totalPosts = await iftOpinionContract.getTotalPosts();\n        console.log(\"Total Posts....\", totalPosts.toNumber());\n      } else {\n        console.log(\"L'objet ethereum n'existe pas !\");\n      }      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Salut IFT-4100 👋👋👋\n        </div>\n\n        <div className=\"bio\">\n          Je m'apelle Hichem, ce portrail est pour but de permettre aux membres du cours IFT-4100 \n          de poster leurs opinions sur le cours ou bien des ressources que vous trouvez utiles \n          pour apprendre le Web3\n        </div>\n\n        <button className=\"postButton\" onClick={post}>\n          Post !\n        </button>\n\n        {/*\n        * Si il n'y a pas de currentAccount on doit afficher notre button\n        */}\n        {!currentAccount && (\n          <button className=\"postButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default App\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}